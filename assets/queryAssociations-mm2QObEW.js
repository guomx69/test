import{e as a,y as l,a as y,bg as d,bG as f,bO as g,bN as b,ba as v,gS as w,n as S}from"./index-BWzlmsaF.js";import{i as $}from"./WebMap-CxtaTK_D.js";import{d as j}from"./Association-DMbFZ8pf.js";import"./ColorBackground-DAw2yfR3.js";import"./Cyclical-CLn7hsuB.js";import"./Basemap-k8u9Dws0.js";import"./writeUtils-C3diJNrM.js";import"./catalogUtils-BJz3irce.js";import"./basemapUtils-CGXsPDdl.js";import"./TablesMixin-BKp09Z6d.js";import"./jsonContext-3NKi26Pb.js";import"./project-eBAhF45W.js";let r=class extends d{constructor(e){super(e),this.associations=[]}};a([l({type:[j],json:{write:!0}})],r.prototype,"associations",void 0),r=a([y("esri.rest.networks.support.QueryAssociationsResult")],r);const O=r;function I(s){const{returnDeletes:e,elements:i,gdbVersion:o,moment:n}=s.toJSON();return{returnDeletes:e,elements:JSON.stringify(i.map(t=>({globalId:t.globalId,networkSourceId:t.networkSourceId,terminalId:t.terminalId}))),types:JSON.stringify(s.types.map(t=>$.toJSON(t))).replaceAll('"connectivity"','"junctionJunctionConnectivity"'),gdbVersion:o,moment:n}}async function L(s,e,i){const o=f(s),n={...I(e),f:"json"},t=g({...o.query,...n}),c=b(t,{...i,method:"post"}),p=`${o.path}/associations/query`,{data:m}=await v(p,c),u=O.fromJSON(m);return e.types.includes("connectivity")&&w(S.getLogger("esri/rest/networks/support/QueryAssociationsParameters"),"types",{replacement:"Please use 'junction-junction-connectivity' instead of 'connectivity'.",see:"https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-networks-support-QueryAssociationsParameters.html#types",version:"4.29",warnOnce:!0}),u}export{L as queryAssociations};
