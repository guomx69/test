import{T as p,l as s,aq as i}from"./index-DKNmOsay.js";import{l as n}from"./MeshVertexAttributes-D1TPfSrc.js";import{M as a}from"./vertexSpaceConversion-DeA0_QPA.js";import"./mat3-C7lBZcHH.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-B_OYdebk.js";import"./computeTranslationToOriginAndRotation-CUTE-rE2.js";import"./meshVertexSpaceUtils-SDaekjCF.js";import"./MeshLocalVertexSpace-t8hLfCnl.js";import"./vec3-CW-a08c3.js";import"./projection-Bxx8JX26.js";import"./DoubleArray--QzgZOaM.js";import"./BufferView-DENb3JkC.js";import"./vec2-CSp0YBXM.js";import"./vec4-DrWlHQAb.js";async function q(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{q as convertMeshVertexSpace};
