import{e as s,y as n,gP as _,a as l,X as m,A as c,gB as g,a0 as f,M as d}from"./index-Bk13oInq.js";import{n as v,r as S}from"./FeatureLayerView2D-IgyIZZ7b.js";import"./EffectView-DjOH8g88.js";import"./timeSupport-O3MeND5A.js";import"./highlightReasons-COwmR_fj.js";import"./HighlightOptions-DDS_yKQv.js";import"./TileKey--6M9Nr4r.js";import"./vec2-BCOFwZS_.js";import"./QueueProcessor-BAwGOb3p.js";import"./ReactiveMap-Da-zqImQ.js";import"./signal-OzWV8BHP.js";import"./quickselect-D0_cvEX6.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./LayerView-Lu0V4hoe.js";import"./Container-6q8gvuqA.js";import"./MapView-CnzZs5CS.js";import"./ColorBackground-eCqVLvQh.js";import"./Cyclical-DJv7mGBZ.js";import"./Basemap-DRYqJJ3x.js";import"./writeUtils-CuGAkQa7.js";import"./catalogUtils-8MGqu6UW.js";import"./basemapUtils-CYwIlTGS.js";import"./TablesMixin-C8r3nFk7.js";import"./TileInfo-YUEK5NHk.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-BqCOQaP5.js";import"./UpdatingHandles-BbNCyyZd.js";import"./GraphicsCollection-CfPNlBPF.js";import"./ViewingMode-dBUh39ak.js";import"./vec2f64-CaE_5U6X.js";import"./mat2df32-R1u-v0DR.js";import"./mat3-C14MOv1v.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-CZa70j6i.js";import"./accessibleHandler-Qth4t0nf.js";import"./GoTo-4Mtk1asH.js";import"./Zoom-DXKbY9hl.js";import"./definitions-Y_v3njP4.js";import"./enums-BlUEVwJR.js";import"./Texture-BEO3u2nF.js";import"./layerViewUtils-DaObYqcz.js";import"./TechniqueInstance-2fY55xnY.js";import"./UpdateTracking2D-BBDb53Qo.js";import"./BindType-BmZEZMMh.js";import"./Util-Dw4pprZa.js";import"./Program-Zm_RPRKO.js";import"./LabelMetric-CEVwe__6.js";import"./enums-BRXbslMp.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-BhuXqU4L.js";import"./TileContainer-BS8vH-8_.js";import"./WGLContainer-C_q-a8yP.js";import"./ProgramTemplate-hUSSPUdw.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-BK3ROBTO.js";import"./config-MDUrh2eL.js";import"./earcut-BqgeR2O3.js";import"./CircularArray-CujHzHWW.js";import"./tileUtils-B7X19rIS.js";import"./featureReductionUtils-Caulfaw_.js";import"./CIMSymbolHelper-DCnivovm.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-Bqe3YEwq.js";import"./GeometryUtils-Cjs4mTb9.js";import"./Rect-CUzevAry.js";import"./SDFHelper-C8vc08C_.js";import"./floatRGBA-DuiNtBOf.js";import"./FeatureCommandQueue-Bl7LjAKh.js";import"./constants-D5zmR9t2.js";import"./HighlightCounter-B8lP6mGt.js";import"./popupUtils-tzDSy2ZI.js";import"./RefreshableLayerView-Zr81cynh.js";const C=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([n()],t.prototype,"_isUserPaused",void 0),s([n({readOnly:!0})],t.prototype,"connectionStatus",null),s([n({type:_})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let o=class extends C(S){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return g(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return f(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return v(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(y=>{const h=d.fromJSON(y);return h.features.forEach(u=>{u.layer=this.layer,u.sourceLayer=this.layer}),h}),new d({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([n()],o.prototype,"pipelineConnectionStatus",void 0),s([n()],o.prototype,"pipelineErrorString",void 0),s([n({readOnly:!0})],o.prototype,"connectionError",null),s([n({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([l("esri.views.2d.layers.StreamLayerView2D")],o);const Qe=o;export{Qe as default};
