import{e as o,y as h,a as E,u as S,A as f,cS as F,bd as M,n as C,X as R,Q as q}from"./index-BWzlmsaF.js";import{a as $}from"./BitmapContainer-DsMclWor.js";import{f as U,y as V}from"./LayerView-BQXdY2z7.js";import{_ as L}from"./ExportStrategy-CncSDiII.js";import{i as W}from"./RefreshableLayerView-DGrxCofN.js";import{a as A}from"./ExportWMSImageParameters-Cs153RfJ.js";import{i as H}from"./timeSupport-wWw5wlja.js";import"./WGLContainer-lxp5wvHq.js";import"./definitions-Y_v3njP4.js";import"./LabelMetric-BuVZDfyV.js";import"./enums-BRXbslMp.js";import"./Texture-D9wDLZJF.js";import"./enums-BlUEVwJR.js";import"./Program-Ca2eHPU7.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-BhuXqU4L.js";import"./vec2f32-BbH2jxlN.js";import"./ProgramTemplate-CdIknHvV.js";import"./mat2df32-FBBXUtrm.js";import"./mat3-BFiNYDsN.js";import"./MapView-DSEG58Vw.js";import"./ColorBackground-DAw2yfR3.js";import"./Cyclical-CLn7hsuB.js";import"./Basemap-k8u9Dws0.js";import"./writeUtils-C3diJNrM.js";import"./catalogUtils-BJz3irce.js";import"./basemapUtils-CGXsPDdl.js";import"./TablesMixin-BKp09Z6d.js";import"./TileInfo-Dk9uCRYd.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-DjBUSSkK.js";import"./UpdatingHandles-zK6lTSR_.js";import"./signal-DP5RWzoB.js";import"./GraphicsCollection-DzZrErgs.js";import"./ReactiveMap-DRDgXWgj.js";import"./ViewingMode-dBUh39ak.js";import"./vec2f64-CaE_5U6X.js";import"./vec2-CgyBqi1o.js";import"./unitBezier-BX6NeAEr.js";import"./HighlightOptions-B7QiFSBW.js";import"./TileKey-Dgh4sNOY.js";import"./QueueProcessor-BmGs_UFN.js";import"./quickselect-D0_cvEX6.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-CZa70j6i.js";import"./accessibleHandler-Bqs2SYG7.js";import"./GoTo-BEAdB0HU.js";import"./Zoom-iGv8K8X_.js";import"./vec3f32-nZdmKIgz.js";import"./Container-CLPp6KHl.js";import"./EffectView-CbPcRkGs.js";import"./highlightReasons-DUPj5iXj.js";import"./StyleDefinition-BK3ROBTO.js";import"./config-MDUrh2eL.js";import"./earcut-BqgeR2O3.js";import"./layerViewUtils-DaObYqcz.js";import"./Bitmap-C9bM1Qz4.js";const Q=r=>{let t=class extends r{initialize(){this.exportImageParameters=new A({layer:this.layer})}destroy(){this.exportImageParameters=S(this.exportImageParameters)}get exportImageVersion(){var e;return(e=this.exportImageParameters)==null||e.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}get timeExtent(){var e;return H(this.layer,(e=this.view)==null?void 0:e.timeExtent,this._get("timeExtent"))}async fetchPopupFeaturesAtLocation(e,a){const{layer:p}=this;if(!e)throw new f("wmslayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:p});const{popupEnabled:d}=p;if(!d)throw new f("wmslayerview:fetchPopupFeatures","popupEnabled should be true",{popupEnabled:d});const i=this.createFetchPopupFeaturesQuery(e);if(!i)return[];const{extent:s,width:m,height:n,x:c,y}=i;if(!(s&&m&&n))throw new f("wmslayerview:fetchPopupFeatures","WMSLayer does not support fetching features.",{extent:s,width:m,height:n});const g=await p.fetchFeatureInfo(s,m,n,c,y);return F(a),g}};return o([h()],t.prototype,"exportImageParameters",void 0),o([h({readOnly:!0})],t.prototype,"exportImageVersion",null),o([h()],t.prototype,"layer",void 0),o([h({readOnly:!0})],t.prototype,"timeExtent",null),t=o([E("esri.views.layers.WMSLayerView")],t),t};let u=class extends Q(W(U(V))){constructor(){super(...arguments),this.bitmapContainer=new $}supportsSpatialReference(r){return this.layer.serviceSupportsSpatialReference(r)}update(r){this.strategy.update(r).catch(t=>{M(t)||C.getLogger(this).error(t)})}attach(){const{layer:r}=this,{imageMaxHeight:t,imageMaxWidth:e}=r;this.bitmapContainer=new $,this.container.addChild(this.bitmapContainer),this.strategy=new L({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:t,imageMaxWidth:e,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(R(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=S(this.strategy),this.container.removeAllChildren()}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(r){const{view:t,bitmapContainer:e}=this,{x:a,y:p}=r,{spatialReference:d}=t;let i,s=0,m=0;if(e.children.some(g=>{const{width:w,height:v,resolution:b,x:l,y:x}=g,I=l+b*w,P=x-b*v;return a>=l&&a<=I&&p<=x&&p>=P&&(i=new q({xmin:l,ymin:P,xmax:I,ymax:x,spatialReference:d}),s=w,m=v,!0)}),!i)return null;const n=i.width/s,c=Math.round((a-i.xmin)/n),y=Math.round((i.ymax-p)/n);return{extent:i,width:s,height:m,x:c,y}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(r,t,e,a){return this.layer.fetchImageBitmap(r,t,e,{timeExtent:this.timeExtent,...a})}};o([h()],u.prototype,"strategy",void 0),o([h()],u.prototype,"updating",void 0),u=o([E("esri.views.2d.layers.WMSLayerView2D")],u);const Dt=u;export{Dt as default};
