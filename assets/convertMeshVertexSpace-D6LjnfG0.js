import{T as p,l as s,aq as i}from"./index-BmjI5m14.js";import{l as n}from"./MeshVertexAttributes-x36DSNZw.js";import{M as a}from"./vertexSpaceConversion-DTwi72cy.js";import"./mat3-B5QNrnhe.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-Qca7kAv9.js";import"./computeTranslationToOriginAndRotation-SSsooGqD.js";import"./meshVertexSpaceUtils-D9V1JR6X.js";import"./MeshLocalVertexSpace-CcAxu8C-.js";import"./vec3-V77XmXku.js";import"./projection-Dzn-tGIu.js";import"./DoubleArray-DJLHNwZG.js";import"./BufferView-D82D6knT.js";import"./vec2-1tP-gqzO.js";import"./vec4-CpGsONb9.js";async function q(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{q as convertMeshVertexSpace};
