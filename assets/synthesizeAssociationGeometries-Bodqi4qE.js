import{e as n,y as a,a as u,bg as y,bG as d,bO as h,bN as l,ba as x}from"./index-Bk13oInq.js";import{d as G}from"./Association-4c2ZykZ5.js";import"./WebMap-B1OSGX1Q.js";import"./ColorBackground-eCqVLvQh.js";import"./Cyclical-DJv7mGBZ.js";import"./Basemap-DRYqJJ3x.js";import"./writeUtils-CuGAkQa7.js";import"./catalogUtils-8MGqu6UW.js";import"./basemapUtils-CYwIlTGS.js";import"./TablesMixin-C8r3nFk7.js";import"./jsonContext-DtZJBWTs.js";import"./project-C0HSHKI9.js";let i=class extends y{constructor(t){super(t),this.maxGeometryCountExceeded=!1,this.associations=[]}};n([a({type:Boolean,json:{write:!0}})],i.prototype,"maxGeometryCountExceeded",void 0),n([a({type:[G],json:{write:!0}})],i.prototype,"associations",void 0),i=n([u("esri.rest.networks.support.AssociationGeometriesResult")],i);const b=i;async function J(t,e,o){const s=d(t),r={...e.toJSON(),f:"json"},p=h({...s.query,...r});o?o.method="post":o={method:"post"};const m=l(p,o),c=`${s.path}/synthesizeAssociationGeometries`;return x(c,m).then(f=>$(f,e.outSpatialReference))}function $(t,e){const{data:o}=t,s=b.fromJSON(o);if(e)for(const r of s.associations)r.geometry.spatialReference=e.clone();return s}export{J as synthesizeAssociationGeometries};
