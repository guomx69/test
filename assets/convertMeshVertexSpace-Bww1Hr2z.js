import{T as p,l as s,aq as i}from"./index-DrXmDmNo.js";import{l as n}from"./MeshVertexAttributes-D5dJfeVB.js";import{M as a}from"./vertexSpaceConversion-BOx3Ur6I.js";import"./mat3-KgbA14kX.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-BpJjWsQA.js";import"./computeTranslationToOriginAndRotation-Bqo9RxXb.js";import"./meshVertexSpaceUtils-BU7c7u4j.js";import"./MeshLocalVertexSpace-BVAL6MSy.js";import"./vec3-CfxySxtW.js";import"./projection-B7qApJDx.js";import"./DoubleArray-CU0y2S-6.js";import"./BufferView-B2Yq5XRJ.js";import"./vec2-D0pkyIyk.js";import"./vec4-DWAFiFra.js";async function q(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{q as convertMeshVertexSpace};
