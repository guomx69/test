import{T as p,l as s,aq as i}from"./index-DeC8R2EY.js";import{l as n}from"./MeshVertexAttributes-DRbrgFQO.js";import{M as a}from"./vertexSpaceConversion-D-EpBmEG.js";import"./mat3-B_XLSnFE.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-BCET9eAv.js";import"./computeTranslationToOriginAndRotation-jE1RGyZD.js";import"./meshVertexSpaceUtils-BVcwBUJW.js";import"./MeshLocalVertexSpace-DaygWvfP.js";import"./vec3-L-IEyNio.js";import"./projection-zmNHCG7b.js";import"./DoubleArray-DmYTJsXn.js";import"./BufferView-ChG0c2Kx.js";import"./vec2-D3LTqm3p.js";import"./vec4-DcKS-89I.js";async function q(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{q as convertMeshVertexSpace};
