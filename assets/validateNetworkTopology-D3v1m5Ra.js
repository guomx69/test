import{bG as l,bO as u,bN as v,ba as y,A as f}from"./index-DMEurr7E.js";import{b as g}from"./WebMap-Ds0kbNzb.js";import"./ColorBackground-DELE_yvu.js";import"./Cyclical-DzFgk17I.js";import"./Basemap-B_JFXx5r.js";import"./writeUtils-UNPMbZhD.js";import"./catalogUtils-Cj4NyFw1.js";import"./basemapUtils-B4CdTPpj.js";import"./TablesMixin-YgM-0nE_.js";import"./jsonContext-sw1e6Qr2.js";import"./project-DK1RFrrh.js";async function q(e,t,r){var p;const o=l(e),i=t.toJSON();t.validationSet&&(i.validationSet=JSON.stringify(t.validationSet));const s={...i,returnEdits:!0,f:"json"},n=u({...o.query,...s}),a=v(n,{...r,method:"post"}),c=`${o.path}/validateNetworkTopology`,{data:b}=await y(c,a),d=g.fromJSON(b);return d.serviceEdits=((p=d.serviceEdits)==null?void 0:p.map(m=>({layerId:m.id,editedFeatures:m.editedFeatures})))??[],d}async function F(e,t,r){if(!t.gdbVersion)throw new f("submit-validate-network-topology-job:missing-gdb-version","version is missing");const o=l(e),i=t.toJSON();t.validationSet&&(i.validationSet=JSON.stringify(t.validationSet));const s=v(o.query,{query:u({...i,returnEdits:!0,async:!0,f:"json"}),...r,method:"post"}),n=`${o.path}/validateNetworkTopology`,{data:a}=await y(n,s);return a?a.statusUrl:null}export{F as submitValidateNetworkTopologyJob,q as validateNetworkTopology};
