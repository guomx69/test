import{T as p,l as s,aq as i}from"./index-CzS7jo2D.js";import{l as n}from"./MeshVertexAttributes-CFlp9XG-.js";import{M as a}from"./vertexSpaceConversion-Lvn_SoJS.js";import"./mat3-Dl7tuPw9.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-BXNFZJYK.js";import"./computeTranslationToOriginAndRotation-D_fqxKJy.js";import"./meshVertexSpaceUtils-Bq1LT5M0.js";import"./MeshLocalVertexSpace-PopnT3kU.js";import"./vec3-CvjKRPkh.js";import"./projection-BS5I6aCu.js";import"./DoubleArray-DYxHhR_A.js";import"./BufferView-ZbIMd6SR.js";import"./vec2-DChfXfRy.js";import"./vec4-BM6HtC4w.js";async function q(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{q as convertMeshVertexSpace};
